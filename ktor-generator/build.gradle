apply plugin: 'kotlin-multiplatform'

repositories {
    mavenLocal()
    mavenCentral()
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        
        configure([jvm]) {
            [tasks.getByName(compilations.main.compileKotlinTaskName), tasks.getByName(compilations.test.compileKotlinTaskName)].each {
                it.sourceCompatibility = JavaVersion.VERSION_1_8
                it.targetCompatibility = JavaVersion.VERSION_1_8

                it.kotlinOptions {
                    //freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
                    apiVersion = "1.3"
                    languageVersion = "1.3"
                    jvmTarget = "1.8"
                }
            }
        }

        configure([js]) {
            [tasks.getByName(compilations.main.compileKotlinTaskName), tasks.getByName(compilations.test.compileKotlinTaskName)]*.kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "umd"
                sourceMap = true
                metaInfo = true
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"

            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}

dependencies {
    jvmTestImplementation gradleTestKit()
}

// JS TESTS

apply plugin: 'com.moowork.node'

afterEvaluate {
    task populateNodeModules(type: Copy, dependsOn: jsTestClasses) {
        from compileTestKotlinJs.kotlinOptions.outputFile
        from compileKotlinJs.kotlinOptions.outputFile

        configurations.jsTestCompileClasspath.each {
            from zipTree(it.absolutePath).matching {
                include '*.js'
                include '*.map'
            }
        }

        into "${buildDir}/node_modules"
    }

    task mochaInstall(type: NpmTask) {
        args = ['install', 'mocha', 'mochawesome', 'mocha-simple-html-reporter', 'mocha-multi-reporters', 'mocha-junit-reporter', 'source-map-support']
        outputs.upToDateWhen { new File("$projectDir/node_modules").exists() }
    }

    task mochaTest(type: NodeTask, dependsOn: [mochaInstall, populateNodeModules]) {
        def mochaMultiReportersConfigJsonFile = new File("$buildDir/mocha-multi-reporters-config.json")
        doFirst {
            // https://www.npmjs.com/package/mocha-multi-reporters
            new File("$buildDir/test-results/jsTest").mkdirs()
            mochaMultiReportersConfigJsonFile.write("""{
                "reporterEnabled": "dot,mocha-junit-reporter,mochawesome",
                "mochawesomeReporterOptions": {
                    "reportFilename": "index",
                    "quiet": true
                },
                "mochaJunitReporterReporterOptions": {
                    "testsuitesTitle": true,
                    "toConsole": false,
                    "suiteTitleSeparatedBy": ".",
                    "mochaFile": "$buildDir/test-results/jsTest/TEST-test.xml"
                }
            }""")
        }
        script = rootProject.file("$buildDir/../node_modules/mocha/bin/mocha")

        //new File(compileTestKotlinJs.kotlinOptions.outputFile).write("require('source-map-support').install();\n" + new File(compileTestKotlinJs.kotlinOptions.outputFile).readLines().join("\n"))
        //println(compileTestKotlinJs.kotlinOptions.outputFile)

        args = [compileTestKotlinJs.kotlinOptions.outputFile, "-r", "source-map-support/register", "--reporter", "mocha-multi-reporters", "--reporter-options", "configFile=$mochaMultiReportersConfigJsonFile"]

        //println("mocha " + args.join(" "))
        execOverrides {
            it.workingDir = buildDir
        }

        doLast {
            copy {
                from "$buildDir/mochawesome-report"
                into "$buildDir/reports/tests/jsTest"
            }
            println("Report saved to $buildDir/reports/tests/jsTest/index.html")
        }
    }

    //tasks.remove(jsTest)
    //task jsTest(dependsOn: mochaTest)
    jsTest.finalizedBy(mochaTest)
}

//configurations.each { println(it) }
